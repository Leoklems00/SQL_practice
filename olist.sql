
CREATE VIEW orders_ AS(
    SELECT order_id, order_status, order_purchase_timestamp, customer_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018
);
CREATE VIEW products_ AS(
    SELECT product_id, product_category_name_english
    FROM products AS p
    JOIN product_category
    USING(product_category_name)
);
-- 1: What is the total revenue generated by Olist, and how has it changed over time?

WITH orders_ AS(
        SELECT order_id
        FROM orders
        WHERE order_status NOT IN ('canceled','unavailable')
    )

SELECT ROUND(SUM(p.payment_value))
    FROM orders_ AS o
    JOIN order_payments AS p
    USING(order_id);

WITH orders_ AS(
        SELECT order_id, 
            YEAR(DATE(order_purchase_timestamp)) AS year, 
            MONTH(DATE(order_purchase_timestamp)) AS month
        FROM orders
        WHERE order_status NOT IN ('canceled','unavailable') 
        AND YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018
    )

SELECT year, month, ROUND(SUM(p.payment_value))
    FROM orders_ AS o
    JOIN order_payments AS p
    USING(order_id)
GROUP BY 1,2
ORDER BY 1,2;


-- 2: How many orders were placed on Olist, and how does this vary by month or season?

SELECT DISTINCT COUNT(order_id)
        FROM orders
        WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018;

SELECT YEAR(DATE(order_purchase_timestamp)) AS year, 
        MONTH(DATE(order_purchase_timestamp)) AS month,
        COUNT(order_id)
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018
GROUP BY year, month
ORDER BY year, month;

-- 3: What are the most popular product categories on Olist, and how do their sales volumes compare to each other?

WITH orders_ AS(
        SELECT order_id
        FROM orders
        WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018
    ),
products_ AS(
    SELECT product_id, product_category_name_english
    FROM products AS p
    JOIN product_category
    USING(product_category_name)
)
SELECT p.product_category_name_english AS category, COUNT(product_id) AS 'No of products'
    FROM order_items AS oi
    LEFT JOIN orders_  AS o
    USING(order_id)
    LEFT JOIN products_ as p
    USING(product_id)
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;



-- 4: What is the average order value (AOV) on Olist, and how does this vary by product category or payment method?


SELECT ROUND(SUM(op.payment_value)/COUNT(op.order_id)) AS AOV
    FROM order_payments AS op
    LEFT JOIN orders AS o
    USING(order_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018;
WITH order_pay AS (
    SELECT op.payment_value, op.order_id
        FROM order_payments AS op
        LEFT JOIN orders AS o
        USING(order_id)
        WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018
),
products_ AS (
    SELECT product_category_name AS category, ot.order_id
    FROM order_items AS ot
    LEFT JOIN products AS p
    USING(product_id)
    LEFT JOIN product_category AS pc
    USING(product_category_name)
)
SELECT p.category, ROUND(SUM(op.payment_value)/COUNT(op.order_id)) AS AOV
FROM order_pay as op
JOIN products_ as p
USING(order_id)
GROUP BY 1
ORDER BY 2 DESC;

-- 5: How many sellers are active on Olist, and how does this number change over time?
SELECT COUNT(DISTINCT seller_id)
    FROM orders AS o
    LEFT JOIN order_items AS ot
    USING(order_id)
    WHERE YEAR(DATE(o.order_purchase_timestamp)) between 2017 and 2018;


SELECT YEAR(DATE(o.order_purchase_timestamp)) AS year, 
    MONTH(DATE(o.order_purchase_timestamp)) AS month,
    COUNT(DISTINCT seller_id) AS "No of sellers"
FROM orders AS o
LEFT JOIN order_items AS ot
USING(order_id)
WHERE YEAR(DATE(o.order_purchase_timestamp)) between 2017 and 2018
GROUP BY 1,2
ORDER BY 1,2;

-- 6: What is the distribution of seller ratings on Olist, and how does this impact sales performance?
SELECT oriv.review_score AS rating, 
    COUNT(seller_id) AS "No of sellers"
FROM orders as o
LEFT JOIN order_items AS ot
USING(order_id)
LEFT JOIN order_reviews as oriv
USING(order_id)
WHERE YEAR(DATE(o.order_purchase_timestamp)) between 2017 and 2018
GROUP BY 1
ORDER BY 2 DESC;

SELECT oriv.review_score AS rating, 
    ROUND(SUM(payment_value)) AS "Sales peformance"
FROM orders as o
LEFT JOIN order_payments AS op
USING(order_id)
LEFT JOIN order_reviews as oriv
USING(order_id)
WHERE YEAR(DATE(o.order_purchase_timestamp)) between 2017 and 2018
GROUP BY 1
ORDER BY 2 DESC;

SELECT oriv.review_score AS rating, 
    ROUND(AVG(payment_value)) AS "Sales peformance"
FROM orders as o
LEFT JOIN order_payments AS op
USING(order_id)
LEFT JOIN order_reviews as oriv
USING(order_id)
WHERE YEAR(DATE(o.order_purchase_timestamp)) between 2017 and 2018
GROUP BY 1
ORDER BY 2 DESC;

-- 7: How many customers have made repeat purchases on Olist, and what percentage of total sales do they account for?

with cust_count AS (
    SELECT c.customer_unique_id, COUNT(order_id) as customer_count
    FROM orders as o
    LEFT JOIN customers as c
    USING(customer_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
    GROUP BY 1
)
SELECT count(*)
FROM cust_count
where customer_count > 1;

with cust_count AS (
    SELECT c.customer_unique_id, COUNT(order_id) as purchase_count
    FROM orders as o
    LEFT JOIN customers as c
    USING(customer_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
    GROUP BY 1
),
repeats AS(
    SELECT *
    FROM cust_count
    where purchase_count > 1
),
repeat_customers AS (
    SELECT customer_id
    from customers
    JOIN repeats
    USING(customer_unique_id)
),
repeat_orders AS (
    SELECT order_id
    FROM orders
    JOIN repeat_customers
    USING(customer_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
)
SELECT ROUND((SUM(payment_value)/(
    SELECT SUM(payment_value)
    FROM orders
    JOIN order_payments
    USING(order_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
)),2)*100 AS "Percentage revenue of repeated sales"
from repeat_orders
join order_payments
USING(order_id);

with cust_count AS (
    SELECT c.customer_unique_id, COUNT(order_id) as purchase_count
    FROM orders as o
    LEFT JOIN customers as c
    USING(customer_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
    GROUP BY 1
),
repeats AS(
    SELECT *
    FROM cust_count
    where purchase_count > 1
),
repeat_customers AS (
    SELECT customer_id
    from customers
    JOIN repeats
    USING(customer_unique_id)
)
SELECT count(order_id)/(
    SELECT COUNT(order_id)
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
)*100 as "Percentage of sales volumn for repeted custommers"
FROM orders
JOIN repeat_customers
USING(customer_id)
WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018;


-- 8: What is the average customer rating for products sold on Olist, and how does this impact sales performance?

WITH orders_ AS (
    select order_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
)
SELECT AVG(review_score)
FROM orders_ AS o
JOIN order_reviews AS oriv
USING(order_id);

WITH orders_ AS (
    select order_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
),
o_items AS (
    SELECT order_id, product_id
    FROM orders_ AS o
    JOIN order_items AS ot
    USING(order_id)
),
products_ AS (
    SELECT product_id, product_category_name_english
    FROM products
    JOIN product_category
    using(product_category_name)
)
SELECT product_category_name_english, AVG(review_score), COUNT(product_id)
FROM o_items as ot
LEFT JOIN order_reviews AS  oriv
USING(order_id)
LEFT JOIN products_ as p
USING(product_id)
WHERE oriv.review_score IS NOT NULL
AND product_category_name_english IS NOT NULL
GROUP BY 1
ORDER BY 3 DESC, 2 DESC;

-- 9: What is the average order cancellation rate on Olist, and how does this impact seller performance?.
select ROUND(((
    SELECT COUNT(*)
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
    AND order_status IN('cancled', 'unavailable')
)/COUNT(order_id)*100),2) AS "Average cancelation Rate"
FROM orders
WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018;

-- 10: What are the top-selling products on Olist, and how have their sales trends changed over time?
WITH orders_ AS(
    SELECT order_id,
        YEAR(DATE(order_purchase_timestamp)) AS year,
        MONTH(DATE(order_purchase_timestamp)) AS month
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) BETWEEN 2017 AND 2018
),
products_ AS(
    SELECT product_id, product_category_name_english
    FROM products AS p
    JOIN product_category
    USING(product_category_name)
),
top_3 AS(
    SELECT p.product_category_name_english, COUNT(product_id) AS 'No of products'
        FROM order_items AS oi
        LEFT JOIN orders_  AS o
        USING(order_id)
        LEFT JOIN products_ as p
        USING(product_id)
    GROUP BY 1
    ORDER BY 2 DESC
    LIMIT 3
),
top_p AS (
    SELECT product_id, p.product_category_name_english AS category
    FROM top_3
    JOIN products_ as p
    USING(product_category_name_english)
)
SELECT category,
    year, 
    month, 
    COUNT(product_id) AS 'No of products'
    FROM order_items AS oi
    LEFT JOIN orders_  AS o
    USING(order_id)
    JOIN top_p as p
    USING(product_id)
GROUP BY 1,2,3
ORDER BY 1,2,3,4 DESC;
-- 11: Which payment methods are most commonly used by Olist customers, and how does this vary by product category or geographic region?
WITH orders_ AS (
    select order_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
)
SELECT payment_type, COUNT(order_id)
from orders_ AS o
JOIN order_payments as opay
USING(order_id)
GROUP BY 1
ORDER BY 2 DESC;

WITH orders_ AS (
    select order_id, customer_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
),
customer_orders AS (
    SELECT order_id, c.customer_id, customer_state
    FROM orders_
    JOIN customers AS c
    using(customer_id)
)
SELECT customer_state, payment_type, COUNT(*)
FROM customer_orders AS co
JOIN order_payments AS op
USING(order_id)
GROUP BY 1, 2
ORDER BY 1, 3 DESC;

WITH order_products AS (
    SELECT p.product_id, 
        p.product_category_name_english, 
        ot.order_id
    FROM products_ as p
    JOIN order_items AS ot
    USING(product_id)
)
SELECT product_category_name_english, payment_type, COUNT(*)
FROM orders_ AS o
JOIN order_products p
USING(order_id)
JOIN order_payments op
USING(order_id)
GROUP BY 1,2
ORDER BY 1,3 DESC;

-- 12: How do customer reviews and ratings affect sales and product performance on Olist?
-- THis has already been answered in No 8 above.

-- 13: Which product categories have the highest profit margins on Olist, and how can the company increase profitability across different categories?
-- NO sufficient data to answer this question

-- 14: How does Olist's marketing spend and channel mix impact sales and customer acquisition costs, and how can the company optimize its marketing strategy to increase ROI?
-- No sufficient data to answer this questions

-- 15: Geolocation having high customer density. Calculate customer retention rate according to geolocations
WITH orders_ AS (
    select order_id, customer_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
)
SELECT customer_state,  COUNT(*)
FROM orders_ AS o
JOIN customers AS c
USING(customer_id)
GROUP BY 1
ORDER BY 2 DESC;

WITH orders_ AS (
    select order_id, customer_id
    FROM orders
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
),
orders_2017 AS (
    select customer_id
    FROM orders_
)
,
orders_2018 AS (
    select customer_id
    FROM orders_
),
retained_customers AS (
    SELECT *
    FROM orders_2017

    INTERSECT

    SELECT *
    FROM orders_2018
),
sub1 AS (
    SELECT customer_state,  COUNT(*)
    FROM retained_customers AS r
    JOIN customers AS c
    USING(customer_id)
    GROUP BY 1
    ORDER BY 2 DESC
),
sub2 AS (
    SELECT customer_state,  COUNT(*)
    FROM orders_ AS o
    JOIN customers AS c
    USING(customer_id)
    GROUP BY 1
    ORDER BY 2 DESC
)
SELECT *
FROM sub1
JOIN sub2
using(customer_state)
;

SELECT *
FROM geolocation;

with cust_count AS (
    SELECT c.customer_unique_id, COUNT(order_id) as purchase_count
    FROM orders as o
    LEFT JOIN customers as c
    USING(customer_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
    GROUP BY 1
)
SELECT count(*)
FROM cust_count
where purchase_count > 1;

SELECT DISTINCT geolocation_zip_code_prefix, geolocation_city, geolocation_state
    FROM geolocation;

SELECT count(payment_value)
    FROM orders
    JOIN order_payments
    USING(order_id)
    WHERE YEAR(DATE(order_purchase_timestamp)) between 2017 and 2018
